; ModuleID = '<stdin>'
source_filename = "WebAssemblyIntrinsic.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z21wasm_i8x16_const_testv() #0 {
entry:
  %a = alloca <16 x i8>, align 16
  %call = call <16 x i8> @_ZL15wasm_v128_constaaaaaaaaaaaaaaaa(i8 signext 0, i8 signext 1, i8 signext 2, i8 signext 3, i8 signext 4, i8 signext 5, i8 signext 6, i8 signext 7, i8 signext 8, i8 signext 9, i8 signext 10, i8 signext 11, i8 signext 12, i8 signext 13, i8 signext 14, i8 signext 15)
  store <16 x i8> %call, <16 x i8>* %a, align 16
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal <16 x i8> @_ZL15wasm_v128_constaaaaaaaaaaaaaaaa(i8 signext %c15, i8 signext %c14, i8 signext %c13, i8 signext %c12, i8 signext %c11, i8 signext %c10, i8 signext %c9, i8 signext %c8, i8 signext %c7, i8 signext %c6, i8 signext %c5, i8 signext %c4, i8 signext %c3, i8 signext %c2, i8 signext %c1, i8 signext %c0) #1 {
entry:
  %c15.addr = alloca i8, align 1
  %c14.addr = alloca i8, align 1
  %c13.addr = alloca i8, align 1
  %c12.addr = alloca i8, align 1
  %c11.addr = alloca i8, align 1
  %c10.addr = alloca i8, align 1
  %c9.addr = alloca i8, align 1
  %c8.addr = alloca i8, align 1
  %c7.addr = alloca i8, align 1
  %c6.addr = alloca i8, align 1
  %c5.addr = alloca i8, align 1
  %c4.addr = alloca i8, align 1
  %c3.addr = alloca i8, align 1
  %c2.addr = alloca i8, align 1
  %c1.addr = alloca i8, align 1
  %c0.addr = alloca i8, align 1
  %.compoundliteral = alloca <16 x i8>, align 16
  store i8 %c15, i8* %c15.addr, align 1
  store i8 %c14, i8* %c14.addr, align 1
  store i8 %c13, i8* %c13.addr, align 1
  store i8 %c12, i8* %c12.addr, align 1
  store i8 %c11, i8* %c11.addr, align 1
  store i8 %c10, i8* %c10.addr, align 1
  store i8 %c9, i8* %c9.addr, align 1
  store i8 %c8, i8* %c8.addr, align 1
  store i8 %c7, i8* %c7.addr, align 1
  store i8 %c6, i8* %c6.addr, align 1
  store i8 %c5, i8* %c5.addr, align 1
  store i8 %c4, i8* %c4.addr, align 1
  store i8 %c3, i8* %c3.addr, align 1
  store i8 %c2, i8* %c2.addr, align 1
  store i8 %c1, i8* %c1.addr, align 1
  store i8 %c0, i8* %c0.addr, align 1
  %0 = load i8, i8* %c0.addr, align 1
  %vecinit = insertelement <16 x i8> undef, i8 %0, i32 0
  %1 = load i8, i8* %c1.addr, align 1
  %vecinit1 = insertelement <16 x i8> %vecinit, i8 %1, i32 1
  %2 = load i8, i8* %c2.addr, align 1
  %vecinit2 = insertelement <16 x i8> %vecinit1, i8 %2, i32 2
  %3 = load i8, i8* %c3.addr, align 1
  %vecinit3 = insertelement <16 x i8> %vecinit2, i8 %3, i32 3
  %4 = load i8, i8* %c4.addr, align 1
  %vecinit4 = insertelement <16 x i8> %vecinit3, i8 %4, i32 4
  %5 = load i8, i8* %c5.addr, align 1
  %vecinit5 = insertelement <16 x i8> %vecinit4, i8 %5, i32 5
  %6 = load i8, i8* %c6.addr, align 1
  %vecinit6 = insertelement <16 x i8> %vecinit5, i8 %6, i32 6
  %7 = load i8, i8* %c7.addr, align 1
  %vecinit7 = insertelement <16 x i8> %vecinit6, i8 %7, i32 7
  %8 = load i8, i8* %c8.addr, align 1
  %vecinit8 = insertelement <16 x i8> %vecinit7, i8 %8, i32 8
  %9 = load i8, i8* %c9.addr, align 1
  %vecinit9 = insertelement <16 x i8> %vecinit8, i8 %9, i32 9
  %10 = load i8, i8* %c10.addr, align 1
  %vecinit10 = insertelement <16 x i8> %vecinit9, i8 %10, i32 10
  %11 = load i8, i8* %c11.addr, align 1
  %vecinit11 = insertelement <16 x i8> %vecinit10, i8 %11, i32 11
  %12 = load i8, i8* %c12.addr, align 1
  %vecinit12 = insertelement <16 x i8> %vecinit11, i8 %12, i32 12
  %13 = load i8, i8* %c13.addr, align 1
  %vecinit13 = insertelement <16 x i8> %vecinit12, i8 %13, i32 13
  %14 = load i8, i8* %c14.addr, align 1
  %vecinit14 = insertelement <16 x i8> %vecinit13, i8 %14, i32 14
  %15 = load i8, i8* %c15.addr, align 1
  %vecinit15 = insertelement <16 x i8> %vecinit14, i8 %15, i32 15
  store <16 x i8> %vecinit15, <16 x i8>* %.compoundliteral, align 16
  %16 = load <16 x i8>, <16 x i8>* %.compoundliteral, align 16
  ret <16 x i8> %16
}

; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z19wasm_i8x16_add_testv() #0 {
entry:
  %a = alloca <16 x i8>, align 16
  %b = alloca <16 x i8>, align 16
  %c = alloca <16 x i8>, align 16
  %call = call <16 x i8> @_ZL15wasm_v128_constaaaaaaaaaaaaaaaa(i8 signext 0, i8 signext 1, i8 signext 2, i8 signext 3, i8 signext 4, i8 signext 5, i8 signext 6, i8 signext 7, i8 signext 8, i8 signext 9, i8 signext 10, i8 signext 11, i8 signext 12, i8 signext 13, i8 signext 14, i8 signext 15)
  store <16 x i8> %call, <16 x i8>* %a, align 16
  %call1 = call <16 x i8> @_ZL15wasm_v128_constaaaaaaaaaaaaaaaa(i8 signext 1, i8 signext 2, i8 signext 3, i8 signext 4, i8 signext 5, i8 signext 6, i8 signext 7, i8 signext 8, i8 signext 9, i8 signext 10, i8 signext 11, i8 signext 12, i8 signext 13, i8 signext 14, i8 signext 15, i8 signext 16)
  store <16 x i8> %call1, <16 x i8>* %b, align 16
  %0 = load <16 x i8>, <16 x i8>* %a, align 16
  %1 = load <16 x i8>, <16 x i8>* %b, align 16
  %call2 = call <16 x i8> @_ZL14wasm_i8x16_addDv16_aS_(<16 x i8> %0, <16 x i8> %1)
  store <16 x i8> %call2, <16 x i8>* %c, align 16
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal <16 x i8> @_ZL14wasm_i8x16_addDv16_aS_(<16 x i8> %a, <16 x i8> %b) #1 {
entry:
  %a.addr = alloca <16 x i8>, align 16
  %b.addr = alloca <16 x i8>, align 16
  %.compoundliteral = alloca <16 x i8>, align 16
  store <16 x i8> %a, <16 x i8>* %a.addr, align 16
  store <16 x i8> %b, <16 x i8>* %b.addr, align 16
  %0 = load <16 x i8>, <16 x i8>* %a.addr, align 16
  %1 = load <16 x i8>, <16 x i8>* %b.addr, align 16
  %add = add <16 x i8> %0, %1
  %vext = shufflevector <16 x i8> %add, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %vecinit = shufflevector <16 x i8> %vext, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %vecinit, <16 x i8>* %.compoundliteral, align 16
  %2 = load <16 x i8>, <16 x i8>* %.compoundliteral, align 16
  ret <16 x i8> %2
}

; Function Attrs: noinline optnone uwtable
define dso_local i32 @_Z19wasm_i8x16_sub_testv() #0 {
entry:
  %a = alloca <16 x i8>, align 16
  %b = alloca <16 x i8>, align 16
  %c = alloca <16 x i8>, align 16
  %call = call <16 x i8> @_ZL15wasm_v128_constaaaaaaaaaaaaaaaa(i8 signext 0, i8 signext 1, i8 signext 2, i8 signext 3, i8 signext 4, i8 signext 5, i8 signext 6, i8 signext 7, i8 signext 8, i8 signext 9, i8 signext 10, i8 signext 11, i8 signext 12, i8 signext 13, i8 signext 14, i8 signext 15)
  store <16 x i8> %call, <16 x i8>* %a, align 16
  %call1 = call <16 x i8> @_ZL15wasm_v128_constaaaaaaaaaaaaaaaa(i8 signext 1, i8 signext 2, i8 signext 3, i8 signext 4, i8 signext 5, i8 signext 6, i8 signext 7, i8 signext 8, i8 signext 9, i8 signext 10, i8 signext 11, i8 signext 12, i8 signext 13, i8 signext 14, i8 signext 15, i8 signext 16)
  store <16 x i8> %call1, <16 x i8>* %b, align 16
  %0 = load <16 x i8>, <16 x i8>* %a, align 16
  %1 = load <16 x i8>, <16 x i8>* %b, align 16
  %call2 = call <16 x i8> @_ZL14wasm_i8x16_subDv16_aS_(<16 x i8> %0, <16 x i8> %1)
  store <16 x i8> %call2, <16 x i8>* %c, align 16
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal <16 x i8> @_ZL14wasm_i8x16_subDv16_aS_(<16 x i8> %a, <16 x i8> %b) #1 {
entry:
  %a.addr = alloca <16 x i8>, align 16
  %b.addr = alloca <16 x i8>, align 16
  %.compoundliteral = alloca <16 x i8>, align 16
  store <16 x i8> %a, <16 x i8>* %a.addr, align 16
  store <16 x i8> %b, <16 x i8>* %b.addr, align 16
  %0 = load <16 x i8>, <16 x i8>* %a.addr, align 16
  %1 = load <16 x i8>, <16 x i8>* %b.addr, align 16
  %sub = sub <16 x i8> %0, %1
  %vext = shufflevector <16 x i8> %sub, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %vecinit = shufflevector <16 x i8> %vext, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %vecinit, <16 x i8>* %.compoundliteral, align 16
  %2 = load <16 x i8>, <16 x i8>* %.compoundliteral, align 16
  ret <16 x i8> %2
}

; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #2 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %Ret = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  %call = call i32 @_Z21wasm_i8x16_const_testv()
  store i32 %call, i32* %Ret, align 4
  %call1 = call i32 @_Z19wasm_i8x16_add_testv()
  store i32 %call1, i32* %Ret, align 4
  %call2 = call i32 @_Z19wasm_i8x16_sub_testv()
  store i32 %call2, i32* %Ret, align 4
  %0 = load i32, i32* %Ret, align 4
  ret i32 %0
}

attributes #0 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 8.0.0 (trunk 344762)"}
